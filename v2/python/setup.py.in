#! /usr/bin/env python
from __future__ import division, print_function

# System imports
#from distutils.core import *
#from distutils      import sysconfig

from setuptools import find_packages
from setuptools.dist import Distribution
from setuptools.command.install import install

# from distutils.command.build import build as build_orig
from distutils.core import setup, Extension

# Third-party modules - we depend on numpy for everything
import numpy


class BinaryDistribution(Distribution):
    def is_pure(self):
        return False
    def has_ext_modules(self):
        return True

class InstallPlatlib(install):
    def finalize_options(self):
        install.finalize_options(self)
        self.install_lib=self.install_platlib


# Obtain the numpy include directory.
numpy_include = numpy.get_include()

# # _cmit extension module
# _cmit = Extension("_cmit",
#                     ["cmit_wrap.cxx",
#                      "cmit.cxx"],
#                     include_dirs = [numpy_include],
#                     )

# # NumyTypemapTests setup
# setup(name        = "cmit",
#       description = "Functions that work on arrays",
#       author      = "DMI",
#       py_modules  = ["cmit"],
#       ext_modules = [_cmit]
#       )

setup(
  name='@PYTHON_PROJECT@',
  version='@PROJECT_VERSION@',
  author='something',
  author_email='something',
  url='something',
  distclass=BinaryDistribution,
  cmdclass={'install': InstallPlatlib},
  packages=find_packages(),
  package_data={
  '@PYTHON_PROJECT@':[$<$<NOT:$<PLATFORM_ID:Windows>>:'.libs/*'>],
  '@PYTHON_PROJECT@.cmit':['$<TARGET_FILE_NAME:pycmit>'],
  },
  include_package_data=True,
  classifiers=[
  'Development Status :: 4 - Beta',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: Apache Software License',
  'Operating System :: POSIX :: Linux',
  'Operating System :: MacOS :: MacOS X',
  'Programming Language :: Python',
  'Programming Language :: C++',
  'Topic :: Scientific/Engineering',
  'Topic :: Software Development :: Libraries :: Python Modules'
  ],
)